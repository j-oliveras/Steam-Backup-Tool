namespace steamBackup.AppServices
{
    using Newtonsoft.Json;
    using System;
    using System.IO;
    using System.Text;

    public static class Settings
    {
        private static readonly string SettingsDir = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\SteamBackupTool";

        public static string SteamDir = "Steam Install Directory";
        public static string BackupDir = "Backup Directory";
        public static int Compression = 5;
        public static int ThreadsBup = Math.Min(4, Environment.ProcessorCount / 2);
        public static int ThreadsRest = Math.Min(4, Environment.ProcessorCount);
        public static bool CheckSteamRun = true;
        public static bool DebugMode = false;
        public static bool UseLzma2 = false;
        public static bool Lzma2UnlockThreads = false;
        public static int Lzma2Threads = Math.Min(8, Environment.ProcessorCount);

        public static string SourceEngineGames = " Old Source Engine Games";

        // Load Settings
        public static void Load()
        {
            if (!File.Exists(SettingsDir + "\\settings.cfg")) return;

            using (var streamReader = new StreamReader(SettingsDir + "\\settings.cfg"))
            {
                var reader = new JsonTextReader(new StringReader(streamReader.ReadToEnd()));

                while (reader.Read())
                {
                    if (reader.Value == null) continue;

                    if (reader.TokenType.ToString() != "PropertyName") continue;

                    switch (reader.Value.ToString())
                    {
                        case "steamDir":
                            reader.Read();
                            SteamDir = reader.Value.ToString();
                            break;
                        case "backupDir":
                            reader.Read();
                            BackupDir = reader.Value.ToString();
                            break;
                        case "compresion":
                            reader.Read();
                            Compression = int.Parse(reader.Value.ToString());
                            break;
                        case "threadsBup":
                            reader.Read();
                            ThreadsBup = int.Parse(reader.Value.ToString());
                            break;
                        case "threadsRest":
                            reader.Read();
                            ThreadsRest = int.Parse(reader.Value.ToString());
                            break;
                        case "checkSteamRun":
                            reader.Read();
                            CheckSteamRun = bool.Parse(reader.Value.ToString());
                            break;
                        case "debugMode":
                            reader.Read();
                            DebugMode = bool.Parse(reader.Value.ToString());
                            break;
                        case "useLzma2":
                            reader.Read();
                            UseLzma2 = bool.Parse(reader.Value.ToString());
                            break;
                        case "lzma2UnlockThreads":
                            reader.Read();
                            Lzma2UnlockThreads = bool.Parse(reader.Value.ToString());
                            break;
                        case "lzma2Threads":
                            reader.Read();
                            Lzma2Threads = int.Parse(reader.Value.ToString());
                            break;
                    }
                }
            }
        }

        // Save Settings
        public static void Save()
        {
            var sb = new StringBuilder();
            var sw = new StringWriter(sb);

            using (JsonWriter writer = new JsonTextWriter(sw))
            {
                writer.Formatting = Formatting.Indented;

                writer.WriteStartObject();
                writer.WriteComment("Do not edit this file, you might break something!");
                writer.WritePropertyName("backupDir");
                writer.WriteValue(BackupDir);
                writer.WritePropertyName("steamDir");
                writer.WriteValue(SteamDir);
                writer.WritePropertyName("compresion");
                writer.WriteValue(Compression);
                writer.WritePropertyName("threadsBup");
                writer.WriteValue(ThreadsBup);
                writer.WritePropertyName("threadsRest");
                writer.WriteValue(ThreadsRest);
                writer.WritePropertyName("checkSteamRun");
                writer.WriteValue(CheckSteamRun);
                writer.WritePropertyName("debugMode");
                writer.WriteValue(DebugMode);
                writer.WritePropertyName("useLzma2");
                writer.WriteValue(UseLzma2);
                writer.WritePropertyName("lzma2UnlockThreads");
                writer.WriteValue(Lzma2UnlockThreads);
                writer.WritePropertyName("lzma2Threads");
                writer.WriteValue(Lzma2Threads);

                writer.WriteEndObject();
            }
            sw.Close();
            
            Directory.CreateDirectory(SettingsDir);
            File.WriteAllText(SettingsDir + "\\settings.cfg", sb.ToString());
        }
    }
}
